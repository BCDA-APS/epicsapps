#!/home/xas_user/anaconda2/bin/python

# convert Off-line Microscope positions to SampleStage
from __future__ import print_function

OFFLINE_INST = 'IDE_Microscope'
OFFLINE_XYZ  = ['13IDE:m1.VAL', '13IDE:m2.VAL', '13IDE:m3.VAL']

ONLINE_INST  = 'IDE_SampleStage'
ONLINE_XYZ   = ['13XRM:m4.VAL', '13XRM:m6.VAL', '13XRM:m5.VAL']

suffix = ''
xoffset, yoffset, zoffset = 0.0, 0.0, 0.0

import sys
import json
import numpy as np
from collections import OrderedDict
from getopt import getopt



def show_usage():
    print("""uscope_transfer [options]

    transfer coordinates of all positions
    from OFFLINE Microscope (%s)
    to ONLINE Microscope (%s)

   with options to add a suffix, or offset coordinates

   Options:
      -h / --help   show this help message
      -s / --suffix suffix to append to transfered positions ['']
      -x / --xoff   offset of X coordinate [0]
      -y / --yoff   offset of Y coordinate [0]
      -z / --zoff   offset of Z coordinate [0]

   Example:
      ~> uscope_transfer -s _test -x 0.120 -y -0.20 -z 0.00

   Note: the two stages must be calibrated ahead of time
    with uscope_calibrate.""" % (OFFLINE_INST, ONLINE_INST))
    sys.exit()

# try:
opts, args = getopt(sys.argv[1:], 'hs:x:y:z:',
                    ['help', 'suffix=', 'xoff=', 'yoff=', 'zoff='])
# except:
#     show_usage()

for key, val in opts:
    if key in ('-h', '--help'):
        print(" help? ") # show_usage()
    elif key in ('-s', '--suffix'):
        suffix = val
    elif key in ('-x', '--xoff'):
        xoffset = float(val)
    elif key in ('-y', '--yoff'):
        xoffset = float(val)
    elif key in ('-z', '--zoff'):
        xoffset = float(val)

########
sys.path.insert(0, '//cars5/Data/xas_user/pylib')
from escan_credentials import conn

from epicsscan import scandb

sdb    = scandb.ScanDB(**conn)
instdb = scandb.InstrumentDB(sdb)

conf_name = "CoordTrans:%s:%s" % (OFFLINE_INST, ONLINE_INST)

conf = json.loads(sdb.get_config(conf_name).notes)
source_pvs = conf['source']
dest_pvs = conf['dest']

rotmat = np.array(conf['rotmat'])

upos = OrderedDict()

positions  = instdb.get_positionlist(OFFLINE_INST)

for pos in positions:
    v =  instdb.get_position_vals(OFFLINE_INST, pos)
    upos[pos]  = [v[pvn] for pvn in source_pvs]

newnames = upos.keys()
vals = np.ones((4, len(upos)))
for i, pname in enumerate(newnames):
    vals[0, i] = upos[pname][0]
    vals[1, i] = upos[pname][1]
    vals[2, i] = upos[pname][2]

pred = np.dot(rotmat, vals)

# make sure that there is at least 1 position in online position list
poslist = instdb.get_positionlist(ONLINE_INST)
_temp = None
if len(poslist) < 1:
    _temp = '__tmp__'
    if saved_temp in newnames:
        _temp = '__tmp__@_'
    self.parent.onSave(saved_temp)
    spos = OrderedDict()
    for pvname in ONLINE_PVS:
        spos[pvname] = 0.000

    instdb.save_position(ONLINE_INST, _temp, spos)
    time.sleep(3.0)
    poslist = instdb.get_positionlist(ONLINE_INST)

pos0 = instdb.get_position_vals(ONLINE_INST, poslist[0])
pvs = pos0.keys()
pvs.sort()

spos = OrderedDict()
for pvname in pvs:
    spos[pvname] = 0.000

for i, pname in enumerate(newnames):
    spos[dest_pvs[0]] = pred[0, i] + xoffset
    spos[dest_pvs[1]] = pred[1, i] + yoffset
    spos[dest_pvs[2]] = pred[2, i] + zoffset
    nlabel = '%s%s' % (pname, suffix)
    instdb.save_position(ONLINE_INST, nlabel, spos)

if _temp is not None:
    instdb.erase_position(_tmp)

print("Transferred %d positions." % (len(newnames)))
