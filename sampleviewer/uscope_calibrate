#!/home/xas_user/anaconda2/bin/python

# calibrate Off-line Microscope and On-line microscopes

OFFLINE_INST = 'IDE_Microscope'
OFFLINE_XYZ  = ['13IDE:m1.VAL', '13IDE:m2.VAL', '13IDE:m3.VAL']

ONLINE_INST  = 'IDE_SampleStage'
ONLINE_XYZ   = ['13XRM:m4.VAL', '13XRM:m6.VAL', '13XRM:m5.VAL']


import sys
import json
import numpy as np
from collections import OrderedDict
from epicsscan import scandb

from lmfit import Parameters, minimize
import larch
from larch_plugins.math.transformations import superimposition_matrix

sys.path.insert(0, '//cars5/Data/xas_user/pylib')
from escan_credentials import conn


sdb    = scandb.ScanDB(**conn)
instdb = scandb.InstrumentDB(sdb)

conf_name = "CoordTrans:%s:%s" % (OFFLINE_INST, ONLINE_INST)


def read_uscope_xyz(name=OFFLINE_INST):
    """
    read XYZ Positions from Offline Microscope Instrument
    returns dictionary of PositionName: (x, y, z)
    """
    out = OrderedDict()
    for pname in instdb.get_positionlist(name):
        v =  instdb.get_position_vals(name, pname)
        out[pname]  = [v[p] for p in OFFLINE_XYZ]
    #endfor

    return out
#enddef

def read_sample_xyz(name=ONLINE_INST):
    """
    read XYZ Positions from SampleStage Instrument
    returns dictionary of PositionName: (x, y, z)

    Note: FineX, FineY and Theta stages are not included
    """
    out = OrderedDict()
    for pname in instdb.get_positionlist(name):
        v = instdb.get_position_vals(name, pname)
        out[pname]  = [v[p] for p in ONLINE_XYZ]
    #endfor
    return out
#enddef


def params2rotmatrix(params, mat):
    """--private--  turn fitting parameters
    into rotation matrix
    """
    mat[0][1] = params['c01'].value
    mat[1][0] = params['c10'].value
    mat[0][2] = params['c02'].value
    mat[2][0] = params['c20'].value
    mat[1][2] = params['c12'].value
    mat[2][1] = params['c21'].value
    return mat
#enddef

def resid_rotmatrix(params, mat, v1, v2):
    "--private-- resdiual function for fit"
    mat = params2rotmatrix(params, mat)
    return (v2 - np.dot(mat, v1)).flatten()
#enddef

def calc_rotmatrix(d1, d2):
    """get best-fit rotation matrix to transform coordinates
    from 1st position dict into the 2nd position dict
    """
    labels = []
    d2keys = d2.keys()
    for x in d1.keys():
        if x in d2keys:
            labels.append(x)
        #endif
    #endfor
    labels.sort()
    if len(labels) < 6:
        print """Error: need at least 6 saved positions
  in common to calculate rotation matrix"""

        return None, None, None
    #endif
    print("Calculating Rotation Matrix using Positions labelled:")
    print(labels)
    v1 = np.ones((4, len(labels)))
    v2 = np.ones((4, len(labels)))
    for i, label in enumerate(labels):
        v1[0, i] = d1[label][0]
        v1[1, i] = d1[label][1]
        v1[2, i] = d1[label][2]
        v2[0, i] = d2[label][0]
        v2[1, i] = d2[label][1]
        v2[2, i] = d2[label][2]
    #endfor

    # get initial rotation matrix, assuming that
    # there are orthogonal coordinate systems.
    mat = superimposition_matrix(v1, v2, scale=True)

    params = Parameters()
    params.add('c10', mat[1][0], vary=True)
    params.add('c01', mat[0][1], vary=True)
    params.add('c20', mat[2][0], vary=True)
    params.add('c02', mat[0][2], vary=True)
    params.add('c12', mat[1][2], vary=True)
    params.add('c21', mat[2][1], vary=True)

    fit_result = minimize(resid_rotmatrix, params, args=(mat, v1, v2))
    mat = params2rotmatrix(params, mat)
    return mat, v1, v2
#enddef


##
## Main Interface
##

def make_uscope_rotation():
    """
    Calculate and store the rotation maxtrix needed to convert
    positions from the GSECARS offline microscope (OSCAR)
    to the SampleStage in the microprobe station.

    This calculates the rotation matrix based on all position
    names that occur in the Position List for both instruments.

    Note:
        The result is saved as a json dictionary to the config table

    Warning:
        Please consult with Matt or Tony before running this!
    """

    d1 = read_uscope_xyz()
    d2 = read_sample_xyz()
    # calculate the rotation matrix
    mat_us2ss, v1, v2 = calc_rotmatrix(d1, d2)
    if mat_us2ss is None:
        return
    #endif
    uscope = instdb.get_instrument(OFFLINE_INST)
    sample = instdb.get_instrument(ONLINE_INST)

    uname = uscope.name.replace(' ', '_')
    sname = sample.name.replace(' ', '_')
    conf_us2ss = "CoordTrans:%s:%s" % (uname, sname)

    us2ss = dict(source=OFFLINE_XYZ, dest=ONLINE_XYZ,
                 rotmat=mat_us2ss.tolist())

    sdb.set_config(conf_us2ss, json.dumps(us2ss))

    # calculate the rotation matrix going the other way
    mat_ss2us, v1, v2 = calc_rotmatrix(d2, d1)
    conf_ss2us = "CoordTrans:%s:%s" % (sname, uname)
    ss2us = dict(source=ONLINE_XYZ, dest=OFFLINE_XYZ,
                 rotmat=mat_ss2us.tolist())
    print("Saving Calibration %s" %  conf_ss2us)
    sdb.set_config(conf_ss2us, json.dumps(ss2us))
    sdb.commit()
#enddef

if __name__ == '__main__':
    make_uscope_rotation()
